<?php

namespace App\Console\Commands;

use App\Exceptions\InitializationException;

use Illuminate\Console\Command;

use Illuminate\Support\Str;

use Illuminate\Support\Facades\Storage;

class MakeMarlinLabels extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:marlin-labels';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Convert a JSON file containing Marlin commands and labels into a platform-compatible enum.';

    const ENUMS_BASE_DIR = 'Enums';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $commandsFilename   = env('MALRIN_COMMANDS_FILENAME');
        $generatedEnumPath  = self::ENUMS_BASE_DIR . '/' . env('MARLIN_GENERATED_ENUM_FILENAME');

        $this->info('Reading content from storage...');

        if (!Storage::disk('internal')->exists( $commandsFilename )) {
            throw new InitializationException('Cannot initialize Marlin labels database: the expected file doesn\'t exist (' . $commandsFilename . ').');
        }

        $this->info('Parsing data...');

        $commands = json_decode(
            json:   Storage::disk('internal')->get( $commandsFilename ),
            flags:  JSON_THROW_ON_ERROR
        );

        $this->info('Creating directory (if missing)...');

        Storage::disk('source')->makeDirectory( self::ENUMS_BASE_DIR );

        $this->info(
            'Generating file "' . Storage::disk('source')->path($generatedEnumPath) . '"...'
        );

        Storage::disk('source')->put(
            path: $generatedEnumPath,
            contents: 
                '<?php' . PHP_EOL .
                PHP_EOL .
                'declare(strict_types=1);' . PHP_EOL .
                PHP_EOL .
                'namespace App\Enums;' . PHP_EOL .
                PHP_EOL .
                'use BenSampo\Enum\Enum;' . PHP_EOL .
                PHP_EOL .
                '/*' . PHP_EOL .
                ' * This file has been auto-generated by running the "make:marlin-labels" Artisan' . PHP_EOL .
                ' * command. DO NOT edit it manually, if you\'ve got an updated list of commands,' . PHP_EOL .
                ' * simply run the generator again.' . PHP_EOL .
                ' */' . PHP_EOL .
                PHP_EOL .
                'final class Marlin extends Enum' . PHP_EOL .
                '{'
        );

        foreach ($commands as $command => $label) {
            Storage::disk('source')->append(
                path: $generatedEnumPath,
                data: "\t" . 'const ' . Str::replace(' ', '_', $command) . ' = \'' . $label . '\';'
            );
        }

        Storage::disk('source')->append(
            path: $generatedEnumPath,
            data:
                PHP_EOL .
                "\t" . 'public static function getLabel(string $gcodeLine) {' . PHP_EOL .
                "\t\t" . '$command = preg_replace(\'/ ;.*/\', \'\', $gcodeLine);' . PHP_EOL .
                "\t\t" . '$command = explode(\' \', $command, 2);' . PHP_EOL .
                PHP_EOL .
                "\t\t" . 'if (!$command || !$command[0]) return \': Unknown\';' . PHP_EOL .
                PHP_EOL .
                "\t\t" . 'if (self::hasKey( $command[0] )) return $command[0] . \': \' . ($command[1] ?? \'\') . \' (\' . self::getValue( $command[0] ) . \')\';' . PHP_EOL .
                PHP_EOL .
                "\t\t" . 'return $command[0] . \': \' . ($command[1] ?? \'\') . \' (Unknown)\';' . PHP_EOL .
                "\t" . '}' . PHP_EOL .
                '}' . PHP_EOL .
                PHP_EOL .
                '?>'
        );

        return Command::SUCCESS;
    }
}
